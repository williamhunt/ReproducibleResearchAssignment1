max(aveI$steps)
which(aveI$steps == max(aveI$steps))
aveI$interval[104]
length(activity$steps)
which.max(aveI$steps)
length(complete.cases(activity))
dim(activity)
activity[1,]
test <- complete.cases(activity)
head(test)
sum(test)
length(activity)
length(activity$steps)
activity[,is.na(activity$steps)]
?which
test <- which(activity$steps == NA)
test
test <- which(activity$steps, is.na)
naT <- length(activity$steps) - length(complete.cases(activity$steps))
naT
length(activity$steps)
length(complete.cases(activity$steps))
length(complete.cases(activity)
)
naT <- length(activity$steps) - sum(complete.cases(activity$steps))
naT
actMS <- activity
df = data.frame(x = 1:20, y = c(1:10,rep(NA,10)))
df$y[is.na(df$y)] = mean(df$y, na.rm=TRUE)
f
f
df
df = data.frame(x = 1:20, y = c(1:10,rep(NA,10)))
df
df$y[is.na(df$y)] = mean(df$y, na.rm=TRUE)
df
q()
slasjf;lkdsjf
dffgj
install.packages("knitr")
library("knitr")
knitr
?knitr
?bzfile
## I move all the programming and output to its own directory Code elsewhere checks and sets up the new directory
## I create a working directory to hold the code and output for the assignment and a data directory to hold the data
## Check and if necessary create a working directory for assignment
if (!file.exists("./ReproducibleResearchAssignment1"))
{
dir.create("./ReproducibleResearchAssignment1")
}
## check to see if a data directory and a zip file exist. Create the directory and download the zipfile as necessary.
if (!file.exists("./data"))
{
dir.create("./data")
}
if (!file.exists("./data/RRAssignment1activity.zip"))
{
fileURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileURL,"./data/RRAssignment1activity.zip", mode = "wb")
## save download date
dateDownloaded <- date()
sink("./ReproducibleResearchAssignment1/dateDataDownloaded.txt")
cat("Date data downloaded: ")
cat(dateDownloaded)
sink()
}
## Read in activity data
activity <- read.csv(unz("./data/RRAssignment1activity.zip"))
activity <- read.csv(unz(filename = "./data/RRAssignment1activity.zip"))
?readcsv
?read.csv
activity <- read.csv(unz(filename = "./data/RRAssignment1activity.zip","activity.csv"))
activity <- read.csv(unz("./data/RRAssignment1activity.zip","activity.csv"))
?hist
?hist()
sumA <- aggregate(steps ~ date ,data = activity, sum)
meanA <- mean(sumA$steps)
medianA <- median(sumA$steps)
hist(sumA$steps)
abline(v = meanA, col = "red", lwd = 2)
abline(v = medianA, col = "blue", lwd = 2)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
?abline
hist(sumA$steps)
abline(v = meanA, col = "red", lwd = 2)
abline(v = medianA, col = "blue", \dots )
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
abline(v = meanA, col = "red", lty = 1)
abline(v = medianA, col = "blue", lty = 2)
hist(sumA$steps)
abline(v = meanA, col = "red", lty = 3)
abline(v = medianA, col = "blue", lty = 4)
hist(sumA$steps)
abline(v = meanA, col = "red", lty = 3, pch = 1)
abline(v = medianA, col = "blue", lty = 4)
hist(sumA$steps)
abline(v = meanA, col = "red", lty = 3, pch = 7)
abline(v = medianA, col = "blue", lty = 4)
hist(sumA$steps)
abline(v = meanA, col = "red", lty = 3, pch = 7)
abline(v = medianA, col = "blue", lty = 4)
hist(sumA$steps)
abline(v = meanA, col = "red", lty = 3)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
abline(v = meanA, col = "red", lty = 1)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
abline(v = meanA, col = "red", lty = 2)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
abline(v = meanA, col = "red", lty = 3)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
abline(v = meanA, col = "red", lty = 4)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
abline(v = meanA, col = "red", lty = 5)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
abline(v = meanA, col = "red", lty = 6)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
abline(v = meanA, col = "red", lty = 7)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
abline(v = meanA, col = "red", pch = 5)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
?points
hist(sumA$steps)
points(meanA, 10, col = "red", pch = 3)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
points(meanA, 10, col = "red", pch = 32)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
points(meanA, 10, col = "red", pch = 40)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
points(meanA, c(0,10,20), col = "red", pch = 50)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
points(meanA, c(0,10,20), col = "red", pch = 3)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
points(c(meanA,meanA,meanA), c(0,10,20), col = "red", pch = 50)
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
?legend
hist(sumA$steps)
points(c(meanA,meanA,meanA), c(0,10,20), col = "red", pch = 3)
legend(0,25,c("mean","median",pch = c(3,4)))
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
points(c(meanA,meanA,meanA), c(0,10,20), col = "red", pch = 3)
legend(0,25,c("mean = +","median = x",col = c("red","red")))
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
points(c(meanA,meanA,meanA), c(0,10,20), col = "red", pch = 3)
legend(0,25,c("mean  = +","median = x"))
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
points(c(meanA,meanA,meanA), c(0,10,20), col = "red", pch = 3)
legend(0,25,c("mean    = +","median = x"), text.col = "red")
# abline(v = medianA, col = "blue", lty = 4)
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
hist(sumA$steps)
points(c(meanA,meanA,meanA), c(0,10,20), col = "red", pch = 3)
points(c(medianA,medianA,medianA), c(5,15,25), col = "red", pch = 4)
legend(0,25,c("mean    = +","median = x"), text.col = "red")
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
?hist()
hist(sumA$steps, main="Histogram of Total Daily Steps", xlab = "Total Steps")
points(c(meanA,meanA,meanA), c(0,10,20), col = "red", pch = 3)
points(c(medianA,medianA,medianA), c(5,15,25), col = "red", pch = 4)
legend(0,25,c("mean    = +","median = x"), text.col = "red")
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
aveI <- aggregate(steps ~ interval ,data = activity, mean)
plot(aveI$interval,aveI$steps, type = "l")
dev.copy(png, file= "averageStepsPerInterval.png")
dev.off()
maxI <- aveI$interval[which.max(aveI$steps)]
plot(aveI$interval,aveI$steps, type = "l", xlab = "HourMinute Time Interval", ylab = "Average # of Steps")
dev.copy(png, file= "averageStepsPerInterval.png")
dev.off()
maxI
?text()
plot(aveI$interval,aveI$steps, type = "l", xlab = "HourMinute Time Interval", ylab = "Average # of Steps")
text(maxI)
dev.copy(png, file= "averageStepsPerInterval.png")
dev.off()
plot(aveI$interval,aveI$steps, type = "l", xlab = "HourMinute Time Interval", ylab = "Average # of Steps")
text(maxI, labels = as.character(maxI))
dev.copy(png, file= "averageStepsPerInterval.png")
dev.off()
?abline
as.character(7)
as.character(maxI)
plot(aveI$interval,aveI$steps, type = "l", xlab = "HourMinute Time Interval", ylab = "Average # of Steps")
text(maxI, 0, as.character(maxI))
dev.copy(png, file= "averageStepsPerInterval.png")
dev.off()
plot(aveI$interval,aveI$steps, type = "l", xlab = "HourMinute Time Interval", ylab = "Average # of Steps")
abline(v = maxI, col = "red")
text(maxI, 0, as.character(maxI), col = "red")
dev.copy(png, file= "averageStepsPerInterval.png")
dev.off()
aveI[835]
interval[835]
class(aveI)
aveI.interval[835]
str(aveI)
aveI$interval[835]
aveI$steps[835]
head aveI
head(aveI)
head(aveI$steps)
aveI$steps[835/5]
aveI$steps[5+835/5]
aveI$steps[835/5-5]
aveI$steps[835/5-10]
aveI$steps[835/5-11]
aveI$steps[835/5-112]
aveI$steps[835/5-12]
aveI$steps[400]
aveI$steps[200]
aveI$steps[100]
aveI$steps[101]
aveI$steps[102]
aveI$steps[103]
aveI$steps[110]
aveI$steps[15]
aveI$steps[105]
aveI$steps[106]
aveI$steps[104]
aveI$steps[103]
aveI$steps[104]
plot(aveI$interval,aveI$steps, type = "l", xlab = "HourMinute Time Interval", ylab = "Average # of Steps")
abline(v = maxI, col = "red")
text(maxI, 0, as.character(maxI), col = "red")
text(maxI, aveI$steps[104], as.character(aveI$step[104]), col = "red")
dev.copy(png, file= "averageStepsPerInterval.png")
dev.off()
?trunc()
plot(aveI$interval,aveI$steps, type = "l", xlab = "HourMinute Time Interval", ylab = "Average # of Steps")
abline(v = maxI, col = "red")
text(maxI, 0, as.character(maxI), col = "red")
text(maxI, aveI$steps[104], as.character(trunc(aveI$step[104]), col = "red")
dev.copy(png, file= "averageStepsPerInterval.png")
dev.off()
plot(aveI$interval,aveI$steps, type = "l", xlab = "HourMinute Time Interval", ylab = "Average # of Steps")
abline(v = maxI, col = "red")
text(maxI, 0, as.character(maxI), col = "red")
text(maxI, aveI$steps[104], as.character(trunc(aveI$step[104])), col = "red")
dev.copy(png, file= "averageStepsPerInterval.png")
dev.off()
?text()
plot(aveI$interval,aveI$steps, type = "l", xlab = "HourMinute Time Interval", ylab = "Average # of Steps")
abline(v = maxI, col = "red")
text(maxI, 0, as.character(maxI), col = "red")
text(maxI, aveI$steps[104], as.character(trunc(aveI$step[104])), col = "red", srt = 90)
dev.copy(png, file= "averageStepsPerInterval.png")
dev.off()
## I move all the programming and output to its own directory Code elsewhere checks and sets up the new directory
## I create a working directory to hold the code and output for the assignment and a data directory to hold the data
## Check and if necessary create a working directory for assignment
if (!file.exists("./ReproducibleResearchAssignment1"))
{
dir.create("./ReproducibleResearchAssignment1")
}
## Check to see if a data directory and a zip file exist. Create the directory and download the zipfile as necessary.
if (!file.exists("./data"))
{
dir.create("./data")
}
if (!file.exists("./data/RRAssignment1activity.zip"))
{
fileURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileURL,"./data/RRAssignment1activity.zip", mode = "wb")
## save download date
dateDownloaded <- date()
sink("./ReproducibleResearchAssignment1/dateDataDownloaded.txt")
cat("Date data downloaded: ")
cat(dateDownloaded)
sink()
}
## Read in activity data
activity <- read.csv(unz("./data/RRAssignment1activity.zip","activity.csv"))
## Set the working directory
setwd("./ReproducibleResearchAssignment1")
## I aggregate the data to calculate the sums for the steps.
sumA <- aggregate(steps ~ date ,data = activity, sum)
meanA <- mean(sumA$steps)
medianA <- median(sumA$steps)
hist(sumA$steps, main="Histogram of Total Daily Steps", xlab = "Total Steps")
# added the mean and median to the histogram
abline(v = meanA, col = "red")
points(meanA, 1, col = "red", pch = 3)
meantext <- paste('mean    =', as.character(trunc(meanA)))
text(meanA,1, meantext, pos = 4, col = "red")
points(medianA, 3, col = "red", pch = 4)
mediantext <- paste('median =', as.character(trunc(medianA)))
text(medianA,3, mediantext, pos = 4, col = "red")
dev.copy(png, file= "histogramTotalStepsIgnoredNAs.png")
dev.off()
aveI <- aggregate(steps ~ interval ,data = activity, mean)
maxI <- aveI$interval[which.max(aveI$steps)]
plot(aveI$interval,aveI$steps, type = "l", xlab = "HourMinute Time Interval", ylab = "Average # of Steps")
# added the max steps interval to the histogram
abline(v = maxI, col = "red")
text(maxI, 0, as.character(maxI), col = "red")
text(maxI, aveI$steps[104], as.character(trunc(aveI$step[104])), pos = 2, col = "red", srt = 90)
dev.copy(png, file= "averageStepsPerInterval.png")
dev.off()
View(aveI)
View(activity)
?trunc
?rem
?trunc
?mod
?Mod
Arg(105)
?Rem
835/100
8*12
.35*20
96+7
?mod
?Mod
rowNum <- 12*trunc(maxI) + mod(maxI)/5 + 1
rowNum <- 12*trunc(maxI) + Mod(maxI)/5 + 1
rowNum
rowNum <- 12*trunc(maxI/100) + Mod(maxI)/5 + 1
rowNum
?Mod
rowNum <- 12*trunc(maxI/100) + (maxI %% 100)/5 + 1
rowNum
plot(aveI$interval,aveI$steps, type = "l", xlab = "HourMinute Time Interval", ylab = "Average # of Steps")
# added the max steps interval to the histogram
abline(v = maxI, col = "red")
text(maxI, 0, as.character(maxI), col = "red")
# to get the step index, we need the formula converting intervals to row numbers
rowNum <- 12*trunc(maxI/100) + (maxI %% 100)/5 + 1
text(maxI, aveI$steps[rowNum], as.character(trunc(aveI$step[rowNum])), pos = 2, col = "red", srt = 90)
dev.copy(png, file= "averageStepsPerInterval.png")
dev.off()
## calculate the missing data, NAs = total # steps - # complete cases
naT <- length(activity$steps) - sum(complete.cases(activity$steps))
# Replace all NAs with interval average
aveS <- aveI$steps
actS <- activity
actS$steps[is.na(actS$steps)] <- aveS
sumC <- aggregate(steps ~ date ,data = actS, sum)
hist(sumC$steps, main="Histogram of Total Daily Steps Replacing NAs with Interval Means", xlab = "Total Steps")
dev.copy(png, file= "histogramTotalStepsFilledNAs.png")
dev.off()
## I aggregate the filled-in data to calculate the sums for the steps.
sumC <- aggregate(steps ~ date ,data = actS, sum)
meanC <- mean(sumC$steps)
medianC <- median(sumC$steps)
hist(sumC$steps, main="Histogram of Total Daily Steps Replacing NAs with Interval Means", xlab = "Total Steps")
# added the mean and median to the filled-in histogram
abline(v = meanC, col = "red")
points(meanC, 1, col = "red", pch = 3)
meantext <- paste('mean    =', as.character(trunc(meanC)))
text(meanC,1, meantext, pos = 4, col = "red")
points(medianC, 3, col = "red", pch = 4)
mediantext <- paste('median =', as.character(trunc(medianC)))
text(medianC,3, mediantext, pos = 4, col = "red")
dev.copy(png, file= "histogramTotalStepsFilledNAs.png")
dev.off()
## testing for weekday/weekend factor creation
dateAsDate <- as.Date(activity$date, format = "%Y-%m-%d")
daylist <- weekdays(dateAsDate,abbreviate = TRUE)
daylist[daylist %in% c("Sat","Sun")] <- "weekend"
daylist[daylist != "weekend"] <- "weekday"
activeWeek <- cbind(actS,daylist)
## calculate averages for weekday and weekend intervals
stepsAveInt <- aggregate(activeWeek, by=list(activeWeek$interval,activeWeek$daylist),FUN="mean")
install.packages("lattice")
library("lattice")
stepsAveInt <- aggregate(activeWeek, by=list(activeWeek$interval,activeWeek$daylist),FUN="mean")
names(stepsAveInt)[1] <- "Interval"
names(stepsAveInt)[2] <- "dayType"
xyplot(steps ~ interval | dayType, data = stepsAveInt, layout = c(1,2), type = "l")
dev.copy(png, file= "AverageStepsbyDayType.png")
dev.off()
xyplot(steps ~ interval | dayType, data = stepsAveInt, layout = c(1,2), type = "l", xlab = "Number of Steps")
dev.copy(png, file= "AverageStepsbyDayType.png")
dev.off()
xyplot(steps ~ interval | dayType, data = stepsAveInt, layout = c(1,2), type = "l", ylab = "Number of Steps")
dev.copy(png, file= "AverageStepsbyDayType.png")
dev.off()
xyplot(steps ~ interval | dayType, data = stepsAveInt, layout = c(1,2), type = "l", xlab = "Interval, ylab = "Number of Steps")
dev.copy(png, file= "AverageStepsbyDayType.png")
dev.off()
xyplot(steps ~ interval | dayType, data = stepsAveInt, layout = c(1,2), type = "l", xlab = "Interval", ylab = "Number of Steps")
dev.copy(png, file= "AverageStepsbyDayType.png")
dev.off()
hist(sumA$steps, main="Histogram of Total Daily Steps", xlab = "Total Steps")
# added the mean and median to the histogram
abline(v = meanA, col = "red")
points(meanA, 1, col = "red", pch = 3)
meantext <- paste('mean    =', as.character(trunc(meanA)))
text(meanA,1, meantext, pos = 4, col = "red")
points(medianA, 3, col = "red", pch = 4)
mediantext <- paste('median =', as.character(trunc(medianA)))
text(medianA,3, mediantext, pos = 4, col = "red")
dev.copy(png, file= "./figure/histogramTotalStepsIgnoredNAs.png")
dev.off()
plot(aveI$interval,aveI$steps, type = "l", xlab = "HourMinute Time Interval", ylab = "Average # of Steps")
# added the max steps interval to the histogram
abline(v = maxI, col = "red")
text(maxI, 0, as.character(maxI), col = "red")
# The interval format is in hours and minutes, HHHMM. To get the step index, we need the formula converting intervals to row numbers.
rowNum <- 12*trunc(maxI/100) + (maxI %% 100)/5 + 1
text(maxI, aveI$steps[rowNum], as.character(trunc(aveI$step[rowNum])), pos = 2, col = "red", srt = 90)
dev.copy(png, file= "./figure/averageStepsPerInterval.png")
dev.off()
hist(sumC$steps, main="Histogram of Total Daily Steps Replacing NAs with Interval Means", xlab = "Total Steps")
# added the mean and median to the filled-in histogram
abline(v = meanC, col = "red")
points(meanC, 1, col = "red", pch = 3)
meantext <- paste('mean    =', as.character(trunc(meanC)))
text(meanC,1, meantext, pos = 4, col = "red")
points(medianC, 3, col = "red", pch = 4)
mediantext <- paste('median =', as.character(trunc(medianC)))
text(medianC,3, mediantext, pos = 4, col = "red")
dev.copy(png, file= "./figure/histogramTotalStepsFilledNAs.png")
dev.off()
xyplot(steps ~ interval | dayType, data = stepsAveInt, layout = c(1,2), type = "l", xlab = "Interval", ylab = "Number of Steps")
dev.copy(png, file= "./figure/AverageStepsbyDayType.png")
dev.off()
?mean
?aggregate
sumA <- aggregate(steps ~ date ,data = activity, sum)
meanA <- mean(sumA$steps, na.rm = TRUE)
medianA <- median(sumA$steps, na.rm = TRUE)
hist(sumA$steps, main="Histogram of Total Daily Steps", xlab = "Total Steps")
# added the mean and median to the histogram
abline(v = meanA, col = "red")
points(meanA, 1, col = "red", pch = 3)
meantext <- paste('mean    =', as.character(trunc(meanA)))
text(meanA,1, meantext, pos = 4, col = "red")
points(medianA, 3, col = "red", pch = 4)
mediantext <- paste('median =', as.character(trunc(medianA)))
text(medianA,3, mediantext, pos = 4, col = "red")
dev.copy(png, file= "./figure/histogramTotalStepsIgnoredNAs.png")
dev.off()
meanA
summary(sumA$steps)
mean(sumA$steps)
median(sumA$steps)
mean(sumA$steps, rm.na = TRUE)
mean(sumA$steps, rm.na = FALSE)
naT
meanC
medianC
library("knitr", lib.loc="C:/RProgramFiles/R-3.1.1/library")
?knitr
knit(PA1_template.md)
setwd("./ReproducibleResearchAssignment1")
getwd
getwd()
knit("PA!_template.md")
knit("C:\PA!_template.md")
knit("C:\PA1_template.md")
knit("C:/PA1_template.md")
knit("C:/PA1_template01.md")
knit("C:/PA1_template01.md")
knit("C:/PA1_template01.md")
q()

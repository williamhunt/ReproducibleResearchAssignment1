source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/William Hunt/plot1.R', echo=TRUE)
source('C:/Users/William Hunt/plot2.R', echo=TRUE)
source('C:/Users/William Hunt/plot3.R', echo=TRUE)
source('C:/Users/William Hunt/plot4.R', echo=TRUE)
q()
?unzip
working
?message
?fold
source('C:/Users/William Hunt/retrieveFileForExDataProgram1.R', echo=TRUE)
retrieve_file
retrieve_file()
dateDownloaded
message("hello")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?unzip
source('~/.active-rstudio-document', echo=TRUE)
date()
source('~/.active-rstudio-document', echo=TRUE)
dateDownloaded
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(nlme)
library(lattice)
xplot(weight ~ Time | Diet, Bodyweight)
xyplot(weight ~ Time | Diet, Bodyweight)
xyplot(weight ~ Time | Diet, BodyWeight)
?lattice
?lattice
?llines()
?trellis.par.set()
source('C:/Users/William Hunt/plot4.R', echo=TRUE)
source('C:/Users/William Hunt/plot3.R', echo=TRUE)
source('C:/Users/William Hunt/plot3test.R', echo=TRUE)
source('C:/Users/William Hunt/plot3test.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/William Hunt/ExData_Plotting1/plot3.R', echo=TRUE)
source('C:/Users/William Hunt/ExData_Plotting1/plot3.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/William Hunt/plot3.R', echo=TRUE)
source('C:/Users/William Hunt/plot3.R', echo=TRUE)
source('C:/Users/William Hunt/plot3.R', echo=TRUE)
source('C:/Users/William Hunt/plot3.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/William Hunt/plot3.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/William Hunt/plot3.R', echo=TRUE)
source('C:/Users/William Hunt/plot3.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
git commit -a
git commit -A
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install(ggplot2)
install.package(ggplot2)
instal.package(ggplot2)
install.packages(ggplot2)
install.packages(ggplot)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~Month)
names(airquality)
g <- ggplot(airquality, aes(Ozone, Wind))
print(g)
g <- qplot(Ozone, Wind, data = airquality)
qplot(Ozone, Wind, data = airquality)
qplot(Ozone, Wind, data = airquality, smooth = "loess")
qplot(Ozone, Wind, data = airquality, panel = panel.loess)
qplot(Ozone, Wind, data = airquality) + stats_smooth("loess")
qplot(Ozone, Wind, data = airquality) + geom_smooth()
q()
?setwd()
source('~/.active-rstudio-document', echo=TRUE)
?aggregate
install.packages(c("boot", "class", "cluster", "codetools", "data.table", "DBI", "formatR", "gsubfn", "htmltools", "httr", "KernSmooth", "markdown", "MASS", "Matrix", "mgcv", "mime", "quantmod", "Rcpp", "swirl", "testthat", "XLConnect", "XLConnectJars", "xlsxjars"))
q()
source('~/.active-rstudio-document', echo=TRUE)
names(activity)
nrow(activity)
str(activity)
summary(activity)
head(activity)
activity$interval[20:30]
activity$interval[0:6]
activity$interval[0:13]
activity$interval[0:26]
tave <- aggregate(steps ~ interval, data = activity, ave)
summary(tave)
str(tave)
plot(tave$steps)
plot(tave$steps, type = "l")
plot(tave$interval, type = "l")
plot(tave$interval, tave$steps, type = "l")
?interaction.plot
head(tave)
plot(tave$interval,tave$steps.1, type = "l")
head(activity)
?plot
plot(tave$interval,tave$steps.1, type = "l")
str(tave)
nrow(tave)
View(tave)
head(tave, skip=287)
?head
head(tave, n=2)
?skip
head(tave[,1:2], n=5)
names(tave)
str(tave)
tail(tave)
nrow(tave)
ncol(tave)
tave
tail(tave)
tave[1,1]
tave[1,]
activity[1,]
str(tave)
tave[1,2]
class(tave)
class(tave$interval)
class(tave$steps)
tave <- aggregate(activity, by=list(interval), fun = mean)
tave <- aggregate(activity, by=list(interval), FUN = mean)
str(activity)
tave <- aggregate(activity, by=list(interval,), FUN = mean)
tave <- aggregate(activity, by=list(activity$interval,), FUN = mean)
tave <- aggregate(activity, by=list(activity$interval), FUN = mean)
str(tave)
?aggregate
tave <- aggregate(x=activity, by=list(interval), FUN = mean)
tave <- aggregate(data=activity, by=list(interval), FUN = mean)
tave <- aggregate(x=activity, by=list(activity$interval), FUN = mean)
warnings()
str(tave)
View(activity)
View(sumA)
aveI <- aggregate(steps ~ interval ,data = activity, mean)
View(aveI)
plot(aveI$interval,aveI$steps, type = "l")
max[aveI$steps]
?max
max(aveI$steps)
which(aveI$steps == max(aveI$steps))
aveI$interval[104]
length(activity$steps)
which.max(aveI$steps)
length(complete.cases(activity))
dim(activity)
activity[1,]
test <- complete.cases(activity)
head(test)
sum(test)
length(activity)
length(activity$steps)
activity[,is.na(activity$steps)]
?which
test <- which(activity$steps == NA)
test
test <- which(activity$steps, is.na)
naT <- length(activity$steps) - length(complete.cases(activity$steps))
naT
length(activity$steps)
length(complete.cases(activity$steps))
length(complete.cases(activity)
)
naT <- length(activity$steps) - sum(complete.cases(activity$steps))
naT
actMS <- activity
df = data.frame(x = 1:20, y = c(1:10,rep(NA,10)))
df$y[is.na(df$y)] = mean(df$y, na.rm=TRUE)
f
f
df
df = data.frame(x = 1:20, y = c(1:10,rep(NA,10)))
df
df$y[is.na(df$y)] = mean(df$y, na.rm=TRUE)
df
q()
source('C:/Users/William Hunt/ReproducibleResearchAssignment1/RRassignment1.R', echo=TRUE)
actS$steps[is.na(actS$steps)] <- actS$aveS
sumC <- aggregate(steps ~ date ,data = actS, sum)
hist(sumC$steps)
dev.copy(png, file= "histogramTotalStepsFilledNA.png")
dev.off()
meanC <- mean(sumC$steps)
medianC <- median(sumC$steps)
act200 <- activity
act200$steps[is.na(act200$steps)] <- 200
sum200 <- aggregate(steps ~ date ,data = act200, sum)
hist(sum200$steps)
# dev.copy(png, file= "histogramTotalStepsFilledNA.png")
# dev.off()
mean200 <- mean(sum200$steps)
median200 <- median(sum200$steps)
View(sum200)
meanA
meanC
mean200
median200
naT
medianA
medianC
View(act200)
act200 <- activity
act200$steps[is.na(act200$steps)] <- 00
sum200 <- aggregate(steps ~ date ,data = act200, sum)
hist(sum200$steps)
mean200 <- mean(sum200$steps)
median200 <- median(sum200$steps)
mean200
median200
medianC
medianA
meanC
?weekdays
weekdays[activity$date[1.1]]
activity$date[1,1]
weekdays[activity$date[1]]
head(activity$date)
summary(activity)
str(activity)
activity$date[1]
?as.date
dateAsDate <- as.Date(activity$date, format = "%Y-%m-%d")
head(activite$date)
head(activity$date)
class(activity$date)
class(dateAsDate)
/
?weekdays
daylist <- weekdays(dateAsDate,abbreviate = TRUE)
View(daylist)
tail(daylist)
test <- c(c(1,2),c(3,4))
test
grouplist <- replace(daylist,c("Sat","Sun"),"weekend")
View(grouplist)
test <- grouplist[2001:3000,]
dim(grouplist)
nrow(grouplist)
class(grouplist)
test <- grouplistl[2001-3000]
test <- grouplist[2001-3000]
View(test)
test <- grouplist[4001-5000]
View(test)
test[556:667]
length(test)
str(test)
match("Sat",grouplist)
test <- match("Sat",grouplist)
head(test)
length(test)
match("Sun",grouplist)
test <- grouplist[1441-1729]
head(test)
tail(test)
test <- grouplist[1730-1829]
View(test)
View(test)
test <- grouplist[1720-1819]
View(test)
test[1:20]
grouplist[1720:1780]
grouplist <- replace(grouplist,c("Mon","Tue","Wed","Thu","Fri"),"weekday")
head(grouplist)
str(grouplist)
grouplist <- replace(grouplist,c("Mon","Tue","Wed","Thu","Fri"),"weekday")
head(grouplist)
tail(grouplist)
head(grouplist)
tail(grouplist)
grouplist[1]
length(grouplist)
grouplist[17575]
str(grouplist)
head(grouplist)
View(tail(grouplist))
View(head(grouplist))
grouplist <- replace(grouplist,c("Mon","Tue","Wed","Thu","Fri"),"weekday")
head(grouplist)
View(grouplist)
daylist <- weekdays(dateAsDate,abbreviate = TRUE)
daylist <- replace(daylist,c("Sat","Sun"),"weekend")
daylist <- replace(daylist,c("Mon","Tue","Wed","Thu","Fri"),"weekday")
head(daylist)
tail(daylist)
View(tail(daylist, n=1000))
View(head(daylist, n=1000))
daylist <- weekdays(dateAsDate,abbreviate = TRUE)
daylist <- replace(daylist,c("Mon","Tue","Wed","Thu","Fri"),"weekday")
daylist <- replace(daylist,c("Sat","Sun"),"weekend")
head(daylist)
tail(daylist)
length(daylist)
daylist[8000]
daylist[12000]
daylist[15000]
daylist[17000]
daylist[17500]
daylist[17550]
daylist[17570]
daylist[17560]
daylist[17560:17575]
daylist[daylist in c("Mon","Tue","Wed","Thu","Fri")] <- "weekday"
daylist[daylist %in% c("Mon","Tue","Wed","Thu","Fri")] <- "weekday"
head(daylist)
tail(daylist)
daylist <- weekdays(dateAsDate,abbreviate = TRUE)
daylist[daylist %in% c("Sat","Sun")] <- "weekend"
daylist[daylist !%in% c("weekend")] <- "weekday"
daylist <- weekdays(dateAsDate,abbreviate = TRUE)
daylist[daylist %in% c("Sat","Sun")] <- "weekend"
daylist[daylist != "weekend"] <- "weekday"
head(daylist)
attr(daylist)
attributes(daylist)
tail(daylist)
length(daylist)
as.factor(daylist)
str(daylist)
daylist <- as.factor(daylist)
str(daylist)
length(daylist)
sum(daylist)
summary(daylist)
activeWeek <- cbind(actC,daylist)
source('C:/Users/William Hunt/ReproducibleResearchAssignment1/RRassignment1.R', echo=TRUE)
setwd("..")
source('C:/Users/William Hunt/ReproducibleResearchAssignment1/RRassignment1.R', echo=TRUE)
dateAsDate <- as.Date(activity$date, format = "%Y-%m-%d")
dateAsDate <- as.Date(activity$date, format = "%Y-%m-%d")
daylist <- weekdays(dateAsDate,abbreviate = TRUE)
daylist[daylist %in% c("Sat","Sun")] <- "weekend"
daylist[daylist != "weekend"] <- "weekday"
activeWeek <- cbind(actC,daylist)
activeWeek <- cbind(actS,daylist)
view(actS)
View(actS)
View(activeWeek)
?lattice
install.packages("lattice")
library("lattice")
?lattic
?lattice
aveIdayType <- aggregate(steps ~ interval ,data = activeWeek, mean)
View(aveIdayType)
install.packages("reshape2")
library("reshape2")
?recast
test <- dcast(activeWeek, interval ~ daylist)
View(test)
test <- dcast(activeWeek, interval ~ daylist, fun.aggregate = mean)
View(test)
test <- cbind(activeWeek$steps,activeWeek$date,activeWeek,interval,activeWeek$daylist)
test <- cbind(activeWeek$steps,activeWeek$date,activeWeek$interval,activeWeek$daylist)
View(test)
aveS <- aveI$steps
## actS <- cbind(activity,aveS)
actS$steps[is.na(actS$steps)] <- aveS
sumC <- aggregate(steps ~ date ,data = actS, sum)
hist(sumC$steps)
dev.copy(png, file= "histogramTotalStepsFilledNA.png")
dev.off()
meanC <- mean(sumC$steps)
medianC <- median(sumC$steps)
dateAsDate <- as.Date(activity$date, format = "%Y-%m-%d")
daylist <- weekdays(dateAsDate,abbreviate = TRUE)
daylist[daylist %in% c("Sat","Sun")] <- "weekend"
daylist[daylist != "weekend"] <- "weekday"
activeWeek <- cbind(actS,daylist)
View(activeWeek)
View(activeWeek)
View(aveS)
aveS <- aveI$steps
actS <- activity
actS$steps[is.na(actS$steps)] <- aveS
View(actS)
sumC <- aggregate(steps ~ date ,data = actS, sum)
hist(sumC$steps)
dev.copy(png, file= "histogramTotalStepsFilledNA.png")
dev.off()
meanC <- mean(sumC$steps)
medianC <- median(sumC$steps)
## testing for weekday/weekend factor creation
dateAsDate <- as.Date(activity$date, format = "%Y-%m-%d")
daylist <- weekdays(dateAsDate,abbreviate = TRUE)
daylist[daylist %in% c("Sat","Sun")] <- "weekend"
daylist[daylist != "weekend"] <- "weekday"
activeWeek <- cbind(actS,daylist)
View(activeWeek)
test <- dcast(activeWeek,steps+date+interval ~ daylist)
View(test)
test <- dcast(activeWeek,steps+interval ~ daylist, fun.aggregate = mean)
View(test)
test <- dcast(activeWeek,steps+date+interval ~ daylist)
View(test)
View(activeWeek)
test <- dcast(activeWeek,steps+date+interval ~ daylist)
View(activeWeek)
View(test)
test <- ave(activeWeek, by= c(interval, daylist))
test <- ave(activeWeek, by= c(activeWeek$interval, activeWeek$daylist))
View(test)
test <- aggregate(activeWeek, by=c(interval,daylist),fun="mean")
test <- aggregate(activeWeek, by=c(interval,daylist),FUN="mean")
test <- aggregate(activeWeek, by=c(activeWeek$interval,activeWeek$daylist),FUN="mean")
test <- aggregate(activeWeek, by=list(activeWeek$interval,activeWeek$daylist),FUN="mean")
View(test)
dim(test)
tail(test)
class(test)
names(test)
stepsAveInt <- aggregate(activeWeek, by=list(activeWeek$interval,activeWeek$daylist),FUN="mean")
View(stepsAveInt)
name(stepsAveInt$V1)
names(stepsAveInt)
?colname
?names
names(stepsAveInt)[1] <- "interval"
names(stepsAveInt)[2] <- "dayType"
names(stepsAveInt)
xyplot(steps ~ interval | dayType, data = stepsAveInt, layout = c(1,2))
xyplot(steps ~ interval | dayType, data = stepsAveInt, layout = c(1,2), type = "l")
source('C:/Users/William Hunt/ReproducibleResearchAssignment1/RRassignment1.R', echo=TRUE)
setwd("..")
source('C:/Users/William Hunt/ReproducibleResearchAssignment1/RRassignment1.R', echo=TRUE)
install.packages("lattice")
source('C:/Users/William Hunt/ReproducibleResearchAssignment1/RRassignment1.R', echo=TRUE)
setwd("..")
source('C:/Users/William Hunt/ReproducibleResearchAssignment1/RRassignment1.R', echo=TRUE)
dev.copy(png, file= "AverageStepsbyDayType.png")
dev.off()
q()
